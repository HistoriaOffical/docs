# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Historia Core Group, Inc
# This file is distributed under the same license as the Historia package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Historia latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-17 06:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../merchants/technical.rst:1
msgid "Technical guides for merchants using Historia. API and SDK resources."
msgstr ""

#: ../../merchants/technical.rst:1
msgid ""
"historia, merchants, payment processor, API, SDK, insight, blockcypher, "
"gocoin, instantsend, vending machines"
msgstr ""

#: ../../merchants/technical.rst:9
msgid "Technical Guides"
msgstr ""

#: ../../merchants/technical.rst:12
msgid "Historia Wallet Integration"
msgstr ""

#: ../../merchants/technical.rst:14
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants "
"/Integration-Resources-Wallet-Integration.pdf>`__."
msgstr ""

#: ../../merchants/technical.rst:18
msgid ""
"`Historia Core <https://github.com/HistoriaOffical/historia/releases>`__ is a fork of "
"Bitcoin and the majority of functionality included in the Historia Core "
"Daemon can be integrated in a similar manner. Key differences relate to "
"customizations to existing JSON-RPC commands to support unique "
"functionalities such as InstantSend. These differences, as well as more "
"general information, are summarized below."
msgstr ""

#: ../../merchants/technical.rst:25
msgid ""
"**General Information:** Historia is a “Proof of Work” blockchain with "
"attributes similar to that of Bitcoin."
msgstr ""

#: ../../merchants/technical.rst:28
msgid "Block Time: ~2.6 Minutes per Block"
msgstr ""

#: ../../merchants/technical.rst:29
msgid ""
"Blockchain Confirmations: 6 Confirmations (or 1 in the case of "
"InstantSend)"
msgstr ""

#: ../../merchants/technical.rst:31
msgid "Github Source: https://github.com/HistoriaOffical/historia"
msgstr ""

#: ../../merchants/technical.rst:32
msgid "Release Link: https://github.com/HistoriaOffical/historia/releases"
msgstr ""

#: ../../merchants/technical.rst:34
msgid ""
"**JSON-RPC Interface:** The majority of Bitcoin JSON-RPC commands are "
"unchanged making integration into existing systems relatively "
"straightforward. For a complete listing of RPC commands see the "
"`Developer Guide <https://historia-docs.github.io/en/developer-guide>`__."
msgstr ""

#: ../../merchants/technical.rst:39
msgid ""
"It’s worth noting that several key Transaction-related JSON-RPC commands "
"have been modified to support InstantSend through the addition of an "
"“InstantLock” field and are listed below:"
msgstr ""

#: ../../merchants/technical.rst:43
msgid ""
"`GetTransaction <https://historia-docs.github.io/en/developer-"
"reference#gettransaction>`__"
msgstr ""

#: ../../merchants/technical.rst:44
msgid ""
"`ListTransactions <https://historia-docs.github.io/en/developer-"
"reference#listtransactions>`__"
msgstr ""

#: ../../merchants/technical.rst:45
msgid ""
"`ListSinceBlock <https://historia-docs.github.io/en/developer-"
"reference#listsinceblock>`__"
msgstr ""

#: ../../merchants/technical.rst:47
msgid ""
"**Block Hashing Algorithm:** Historia uses the “X11” algorithm in place of "
"SHA256 used in Bitcoin. It’s important to note, however, that this only "
"affects the hashing of the Block itself. All other internals utilize "
"SHA256 hashes (transactions, merkle root, etc) which allows for most "
"existing libraries to work in the Historia ecosystem."
msgstr ""

#: ../../merchants/technical.rst:53
msgid ""
"**Supporting Libraries:** Due to the aforementioned differences in "
"Hashing Algorithm only minor adjustments are required before using "
"Bitcoin libraries on the Historia network. The most popular libraries have "
"already been ported to Historia which has enabled support for most major "
"programming languages. These resources are outlined in the :ref:`SDK "
"Resources <sdk-resources>` section of this document."
msgstr ""

#: ../../merchants/technical.rst:63
msgid "v0.13.0 Integration Notes"
msgstr ""

#: ../../merchants/technical.rst:65
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants/Integration-"
"Resources-Historia-v0.13.0-Transaction-Types.pdf>`__."
msgstr ""

#: ../../merchants/technical.rst:67
msgid ""
"Historia 0.13.0 implements `DIP002 Special Transactions "
"<https://github.com/HistoriaOffical/dips/blob/master/dip-0002.md>`__, which form "
"a basis for new transaction types that will provide on-chain metadata to "
"assist various consensus mechanisms. The following special transaction "
"types exist:"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Release"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Version"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Type"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Payload Size"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Payload"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Payload JSON"
msgstr ""

#: ../../merchants/technical.rst:73
msgid "Transaction Purpose"
msgstr ""

#: ../../merchants/technical.rst:75 ../../merchants/technical.rst:77
#: ../../merchants/technical.rst:79 ../../merchants/technical.rst:81
#: ../../merchants/technical.rst:83 ../../merchants/technical.rst:85
#: ../../merchants/technical.rst:87
msgid "v0.13.0"
msgstr ""

#: ../../merchants/technical.rst:75 ../../merchants/technical.rst:77
#: ../../merchants/technical.rst:79 ../../merchants/technical.rst:81
#: ../../merchants/technical.rst:83 ../../merchants/technical.rst:85
#: ../../merchants/technical.rst:87
msgid "3"
msgstr ""

#: ../../merchants/technical.rst:75
msgid "0"
msgstr ""

#: ../../merchants/technical.rst:75
msgid "n/a"
msgstr ""

#: ../../merchants/technical.rst:75
msgid "Standard Transaction"
msgstr ""

#: ../../merchants/technical.rst:77
msgid "1"
msgstr ""

#: ../../merchants/technical.rst:77 ../../merchants/technical.rst:79
#: ../../merchants/technical.rst:81 ../../merchants/technical.rst:83
#: ../../merchants/technical.rst:85 ../../merchants/technical.rst:87
msgid "<variable int>"
msgstr ""

#: ../../merchants/technical.rst:77 ../../merchants/technical.rst:79
#: ../../merchants/technical.rst:81 ../../merchants/technical.rst:83
#: ../../merchants/technical.rst:85 ../../merchants/technical.rst:87
msgid "<hex>"
msgstr ""

#: ../../merchants/technical.rst:77
msgid "proRegTx"
msgstr ""

#: ../../merchants/technical.rst:77
msgid ""
"`Masternode Registration <https://historia-docs.github.io/en/developer-"
"reference#proregtx>`__"
msgstr ""

#: ../../merchants/technical.rst:79
msgid "2"
msgstr ""

#: ../../merchants/technical.rst:79
msgid "proUpServTx"
msgstr ""

#: ../../merchants/technical.rst:79
msgid ""
"`Update Masternode Service <https://historia-docs.github.io/en/developer-"
"reference#proupservtx>`__"
msgstr ""

#: ../../merchants/technical.rst:81
msgid "proUpRegTx"
msgstr ""

#: ../../merchants/technical.rst:81
msgid ""
"`Update Masternode Operator <https://historia-docs.github.io/en/developer-"
"reference#proupregtx>`__"
msgstr ""

#: ../../merchants/technical.rst:83
msgid "4"
msgstr ""

#: ../../merchants/technical.rst:83
msgid "proUpRevTx"
msgstr ""

#: ../../merchants/technical.rst:83
msgid ""
"`Masternode Revocation <https://historia-docs.github.io/en/developer-"
"reference#prouprevtx>`__"
msgstr ""

#: ../../merchants/technical.rst:85
msgid "5"
msgstr ""

#: ../../merchants/technical.rst:85
msgid "cbTx"
msgstr ""

#: ../../merchants/technical.rst:85
msgid ""
"`Masternode List Merkle Proof <https://historia-docs.github.io/en/developer-"
"reference#cbtx>`__"
msgstr ""

#: ../../merchants/technical.rst:87
msgid "6"
msgstr ""

#: ../../merchants/technical.rst:87
msgid "qcTx"
msgstr ""

#: ../../merchants/technical.rst:87
msgid ""
"`Quorum Commitment <https://historia-docs.github.io/en/developer-"
"reference#qctx>`__"
msgstr ""

#: ../../merchants/technical.rst:90
msgid "Integration notes:"
msgstr ""

#: ../../merchants/technical.rst:92
msgid ""
"`DIP002 Special Transactions "
"<https://github.com/HistoriaOffical/dips/blob/master/dip-0002.md>`__ are a "
"foundational component of Historia Core v0.13.0 and introduce a new "
"Transaction Version and related “Payload” to the network."
msgstr ""

#: ../../merchants/technical.rst:96
msgid ""
"Integrated Systems must be able to `serialize and deserialize "
"<https://github.com/HistoriaOffical/dips/blob/master/dip-0002.md#serialization-"
"hashing-and-signing>`__ these new Transaction Types in order to "
"accurately encode and decode Raw Transaction data."
msgstr ""

#: ../../merchants/technical.rst:100
msgid ""
"From a `backwards compatibility "
"<https://github.com/HistoriaOffical/dips/blob/master/dip-0002.md#compatibility>`__"
" perspective, the 4 byte (32-bit) ``version`` field included in Legacy "
"Transactions has been split into two fields: ``version`` and ``type`` "
"(each consisting of 2 bytes)."
msgstr ""

#: ../../merchants/technical.rst:105
msgid ""
"`InstantSend "
"<https://docs.historia.network/en/latest/merchants/technical.html#instantsend>`__"
" status and Payload JSON (e.g. ``proRegTx``) is included in the JSON-RPC "
"response, please note that this data is not part of the calculated hash "
"and is provided for convenience."
msgstr ""

#: ../../merchants/technical.rst:110
msgid "Legacy transaction structure::"
msgstr ""

#: ../../merchants/technical.rst:121
msgid "Updated transaction structure::"
msgstr ""

#: ../../merchants/technical.rst:135
msgid ""
"See the `Special Transactions developer documentation <https://historia-"
"docs.github.io/en/developer-reference#special-transactions>`__ for "
"additional detail on these data types, e.g. ``<variable int>``. See the "
"`v0.13.0 transaction types integration documentation (PDF) "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants/Integration-"
"Resources-Historia-v0.13.0-Transaction-Types.pdf>`__ for worked examples of "
"each transaction type."
msgstr ""

#: ../../merchants/technical.rst:143
msgid "API Services"
msgstr ""

#: ../../merchants/technical.rst:145
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants "
"/Integration-Resources-API.pdf>`__."
msgstr ""

#: ../../merchants/technical.rst:149
msgid ""
"Several API services exist to facilitate quick and easy integration with "
"the Historia network for services including:"
msgstr ""

#: ../../merchants/technical.rst:152
msgid "Transaction broadcasting"
msgstr ""

#: ../../merchants/technical.rst:153
msgid "Exchange rates"
msgstr ""

#: ../../merchants/technical.rst:154
msgid "Currency conversion"
msgstr ""

#: ../../merchants/technical.rst:155
msgid "Invoice generation"
msgstr ""

#: ../../merchants/technical.rst:157
msgid ""
"API Services are typically leveraged to eliminate that requirement of "
"running your own infrastructure to support blockchain interactions. This "
"includes mechanisms such as:"
msgstr ""

#: ../../merchants/technical.rst:161
msgid "Forming and Broadcasting a Transaction to the network."
msgstr ""

#: ../../merchants/technical.rst:162
msgid "Address generation using HD Wallets."
msgstr ""

#: ../../merchants/technical.rst:163
msgid "Payment Processing using WebHooks."
msgstr ""

#: ../../merchants/technical.rst:165
msgid ""
"There are a variety of options for supporting these methods, with the key"
" differentiator being the pricing model included and supported features. "
"The following list of API Providers attempts to outline these key "
"features/differentiators and also includes a link to related "
"documentation."
msgstr ""

#: ../../merchants/technical.rst:173
msgid "Insight"
msgstr ""

#: ../../merchants/technical.rst:180
msgid "https://github.com/historiaevo/insight-api"
msgstr ""

#: ../../merchants/technical.rst:182
msgid ""
"The open-source Insight REST API provides you with a convenient, powerful"
" and simple way to read data from the Historia network and build your own "
"services with it. A practical guide to getting started with the Insight "
"API and Insight UI block explorer is available :ref:`here <insight-api>`."
msgstr ""

#: ../../merchants/technical.rst:188
msgid "Features: Transaction Broadcast, WebSocket Notifications."
msgstr ""

#: ../../merchants/technical.rst:189
msgid "Pricing Model: Free / Open Source"
msgstr ""

#: ../../merchants/technical.rst:190
msgid "Documentation: https://github.com/historiaevo/insight-api"
msgstr ""

#: ../../merchants/technical.rst:194 ../../merchants/technical.rst:441
msgid "BlockCypher"
msgstr ""

#: ../../merchants/technical.rst:201 ../../merchants/technical.rst:448
msgid "https://www.blockcypher.com"
msgstr ""

#: ../../merchants/technical.rst:203
msgid ""
"BlockCypher is a simple, mostly RESTful JSON API for interacting with "
"blockchains, accessed over HTTP or HTTPS from the api.blockcypher.com "
"domain."
msgstr ""

#: ../../merchants/technical.rst:207
msgid ""
"Features: Transaction Broadcast, HD Wallet / Address Generation, "
"WebSocket and WebHook Callbacks as well as Payment Forwarding. "
"BlockCypher does not handle Private Keys."
msgstr ""

#: ../../merchants/technical.rst:210
msgid ""
"Pricing Model: Per API Call, 5000 Requests -> $85.00 per month "
"(https://accounts.blockcypher.com/plans)"
msgstr ""

#: ../../merchants/technical.rst:212
msgid "Documentation: https://www.blockcypher.com/dev/historia/"
msgstr ""

#: ../../merchants/technical.rst:216
msgid "BitGo"
msgstr ""

#: ../../merchants/technical.rst:223
msgid "https://www.bitgo.com"
msgstr ""

#: ../../merchants/technical.rst:225
msgid ""
"BitGo provides a simple and robust RESTful API and client SDK to "
"integrate digital currency wallets with your application. Support for "
"Historia InstantSend is available."
msgstr ""

#: ../../merchants/technical.rst:229
msgid ""
"Features: Multi-Signature HD Wallets, Wallet Operations, WebSocket and "
"WebHook Notifications, Custody Solutions"
msgstr ""

#: ../../merchants/technical.rst:231
msgid "Pricing Model: Per API Call"
msgstr ""

#: ../../merchants/technical.rst:232
msgid "Documentation: https://www.bitgo.com/api/v2/"
msgstr ""

#: ../../merchants/technical.rst:235
msgid "ChainRider"
msgstr ""

#: ../../merchants/technical.rst:242
msgid "https://www.chainrider.io"
msgstr ""

#: ../../merchants/technical.rst:244
msgid ""
"ChainRider is a cloud service providing a set of REST APIs for digital "
"currency management and exploration."
msgstr ""

#: ../../merchants/technical.rst:247
msgid ""
"Features: Blockchain queries, Event Notifications, Transaction Broadcast,"
" Payment Processing, etc."
msgstr ""

#: ../../merchants/technical.rst:249
msgid "Pricing Model: Free trial, pay per API call"
msgstr ""

#: ../../merchants/technical.rst:250
msgid "Documentation: https://www.chainrider.io/docs/historia"
msgstr ""

#: ../../merchants/technical.rst:254 ../../merchants/technical.rst:456
msgid "GoCoin"
msgstr ""

#: ../../merchants/technical.rst:261 ../../merchants/technical.rst:463
msgid "https://gocoin.com"
msgstr ""

#: ../../merchants/technical.rst:263
msgid ""
"The GoCoin platform makes taking Historia as easy as installing a plugin. "
"Payment processing is already implemented for every major shopping "
"platform. GoCoin is focused on helping merchants in privacy-related "
"niches and specific industries, and handles all transaction risk for all "
"payments from your customers."
msgstr ""

#: ../../merchants/technical.rst:269
msgid ""
"Features: Invoicing, Exchange Rates, WebHook Callbacks. GoCoin holds "
"Private Keys on their server allowing the merchant to withdraw funds in "
"Cryptocurrency or convert to Fiat."
msgstr ""

#: ../../merchants/technical.rst:272
msgid ""
"Integrations: WooCommerce, Magento, Prestashop, VirtueMart, ZenCart, "
"OpenCart, OSCommerce, UberCart, nopCommerce, WHMCS, NATS4, Shopify."
msgstr ""

#: ../../merchants/technical.rst:274
msgid "Pricing Model: 1% Processing Fee (https://gocoin.com/fees)"
msgstr ""

#: ../../merchants/technical.rst:275
msgid "Documentation: https://gocoin.com/docs"
msgstr ""

#: ../../merchants/technical.rst:279
msgid "CoinPayments"
msgstr ""

#: ../../merchants/technical.rst:286
msgid "https://www.coinpayments.net"
msgstr ""

#: ../../merchants/technical.rst:288
msgid ""
"CoinPayments is an integrated payment gateway for cryptocurrencies such "
"as Historia. Shopping cart plugins are available for all popular webcarts "
"used today. CoinPayments can help you set up a new checkout, or integrate"
" with your pre-existing checkout."
msgstr ""

#: ../../merchants/technical.rst:293
msgid ""
"Features: Invoicing, Exchange Rates, WebHook Callbacks. CoinPayments "
"holds Private Keys on their server allowing merchant to withdraw funds in"
" Cryptocurrency or convert to Fiat."
msgstr ""

#: ../../merchants/technical.rst:296
msgid ""
"Integrations: aMember Pro, Arastta, Blesta, BoxBilling, Drupal, Ecwid, "
"Hikashop, Magento, OpenCart, OSCommerce, PrestaShop, Tomato Cart, "
"WooCommerce, Ubercart, XCart, ZenCart"
msgstr ""

#: ../../merchants/technical.rst:299
msgid ""
"Pricing Model: 0.5% Processing Fee (https://www.coinpayments.net/help-"
"fees)"
msgstr ""

#: ../../merchants/technical.rst:301
msgid "Documentation: https://www.coinpayments.net/apidoc"
msgstr ""

#: ../../merchants/technical.rst:307
msgid "SDK Resources"
msgstr ""

#: ../../merchants/technical.rst:309
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants "
"/Integration-Resources-SDK.pdf>`__."
msgstr ""

#: ../../merchants/technical.rst:313
msgid ""
"SDKs (Software Development Kits) are used to accelerate the design and "
"development of a product for the Historia Network. These resources can either"
" be used to interface with an API provider or for the creation of "
"standalone applications by forming transactions and/or performing various"
" wallet services."
msgstr ""

#: ../../merchants/technical.rst:321
msgid "Historia Developer Guide"
msgstr ""

#: ../../merchants/technical.rst:328
msgid "https://historia-docs.github.io/en/developer-guide"
msgstr ""

#: ../../merchants/technical.rst:330
msgid ""
"The Historia Developer Guide aims to provide the information you need to "
"understand Historia and start building Historia-based applications. To make the "
"best use of this documentation, you may want to install the current "
"version of Historia Core, either from source or from a pre-compiled "
"executable."
msgstr ""

#: ../../merchants/technical.rst:336
msgid "Documentation: https://historia-docs.github.io/en/developer-guide"
msgstr ""

#: ../../merchants/technical.rst:339
msgid "NodeJS/JavaScript: Bitcore (Historiacore)"
msgstr ""

#: ../../merchants/technical.rst:346
msgid "https://bitcore.io"
msgstr ""

#: ../../merchants/technical.rst:348
msgid ""
"Historiacore is a fork of Bitcore and operates as a full Historia node — your "
"apps run directly on the peer-to-peer network. For wallet application "
"development, additional indexes have been added into Historia for querying "
"address balances, transaction history, and unspent outputs."
msgstr ""

#: ../../merchants/technical.rst:353
msgid "Platform: NodeJS / Javascript"
msgstr ""

#: ../../merchants/technical.rst:354
msgid "Documentation: https://bitcore.io/api/lib"
msgstr ""

#: ../../merchants/technical.rst:355
msgid "Repository lib: https://github.com/historiaevo/historiacore-lib"
msgstr ""

#: ../../merchants/technical.rst:356
msgid "Repository node: https://github.com/historiaevo/historiacore-node"
msgstr ""

#: ../../merchants/technical.rst:359
msgid "PHP: Bitcoin-PHP"
msgstr ""

#: ../../merchants/technical.rst:361
msgid "https://github.com/Bit-Wasp/bitcoin-php"
msgstr ""

#: ../../merchants/technical.rst:363
msgid ""
"Bitcoin-PHP is an implementation of Bitcoin with support for Historia using "
"mostly pure PHP."
msgstr ""

#: ../../merchants/technical.rst:366
msgid "Platform: PHP"
msgstr ""

#: ../../merchants/technical.rst:367
msgid ""
"Documentation: https://github.com/Bit-Wasp/bitcoin-"
"php/blob/master/doc/Introduction.md"
msgstr ""

#: ../../merchants/technical.rst:368
msgid "Repository: https://github.com/Bit-Wasp/bitcoin-php"
msgstr ""

#: ../../merchants/technical.rst:371
msgid "Python: PyCoin"
msgstr ""

#: ../../merchants/technical.rst:373
msgid "https://github.com/richardkiss/pycoin"
msgstr ""

#: ../../merchants/technical.rst:375
msgid ""
"PyCoin is an implementation of a bunch of utility routines that may be "
"useful when dealing with Bitcoin and Historia. It has been tested with Python"
" 2.7, 3.6 and 3.7."
msgstr ""

#: ../../merchants/technical.rst:379
msgid "Platform: Python"
msgstr ""

#: ../../merchants/technical.rst:380
msgid "Documentation: https://pycoin.readthedocs.io/en/latest/"
msgstr ""

#: ../../merchants/technical.rst:381
msgid "Repository: https://github.com/richardkiss/pycoin"
msgstr ""

#: ../../merchants/technical.rst:384
msgid "Java: HistoriaJ"
msgstr ""

#: ../../merchants/technical.rst:391
msgid "https://github.com/HashEngineering/historiaj"
msgstr ""

#: ../../merchants/technical.rst:393
msgid ""
"HistoriaJ is a library for working with the Historia protocol. It can maintain a "
"wallet, send/receive transactions (including InstantSend) without needing"
" a local copy of Historia Core, and has many other advanced features. It's "
"implemented in Java but can be used from any JVM compatible language: "
"examples in Python and JavaScript are included."
msgstr ""

#: ../../merchants/technical.rst:399
msgid "Platform: Java"
msgstr ""

#: ../../merchants/technical.rst:400
msgid "Documentation: https://bitcoinj.github.io/getting-started"
msgstr ""

#: ../../merchants/technical.rst:401
msgid "Example application: https://github.com/tomasz-ludek/pocket-of-historia"
msgstr ""

#: ../../merchants/technical.rst:404
msgid "Objective-C: Historia-Sync"
msgstr ""

#: ../../merchants/technical.rst:411
msgid "https://github.com/historiaevo/historiasync-iOS"
msgstr ""

#: ../../merchants/technical.rst:413
msgid ""
"Historia-Sync is an Objective-C Historia blockchain framework for iOS. It "
"implements all most relevant Bitcoin Improvement Proposals (BIPs) and "
"Historia Improvement Proposals (DIPs)."
msgstr ""

#: ../../merchants/technical.rst:417
msgid "Platform: iOS"
msgstr ""

#: ../../merchants/technical.rst:418
msgid "Repository: https://github.com/historiaevo/historiasync-iOS"
msgstr ""

#: ../../merchants/technical.rst:421
msgid ".NET: NBitcoin"
msgstr ""

#: ../../merchants/technical.rst:428
msgid "https://github.com/MetacoSA/NBitcoin"
msgstr ""

#: ../../merchants/technical.rst:430
msgid ""
"NBitcoin is the most complete Bitcoin library for the .NET platform, and "
"has been patched to include support for Historia. It implements all most "
"relevant Bitcoin Improvement Proposals (BIPs) and Historia Improvement "
"Proposals (DIPs). It also provides low level access to Historia primitives so"
" you can easily build your application on top of it."
msgstr ""

#: ../../merchants/technical.rst:436
msgid "Platform: .NET"
msgstr ""

#: ../../merchants/technical.rst:437
msgid ""
"Documentation: "
"https://programmingblockchain.gitbooks.io/programmingblockchain/content/"
msgstr ""

#: ../../merchants/technical.rst:438
msgid "Repository: https://github.com/MetacoSA/NBitcoin"
msgstr ""

#: ../../merchants/technical.rst:450
msgid "BlockCypher also offers client SDKs."
msgstr ""

#: ../../merchants/technical.rst:452
msgid "Platform: Ruby, Python, Java, PHP, Go, NodeJS"
msgstr ""

#: ../../merchants/technical.rst:453
msgid ""
"Repositories: https://www.blockcypher.com/dev/historia/#blockcypher-"
"supported-language-sdks"
msgstr ""

#: ../../merchants/technical.rst:465
msgid "Platform: JavaScript, PHP, Java, Ruby, .NET, Python"
msgstr ""

#: ../../merchants/technical.rst:466
msgid "Repositories: https://gocoin.com/docs"
msgstr ""

#: ../../merchants/technical.rst:470
msgid "InstantSend"
msgstr ""

#: ../../merchants/technical.rst:472
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/HistoriaOffical/docs/raw/master/binary/merchants "
"/Integration-Resources-InstantSend.pdf>`__."
msgstr ""

#: ../../merchants/technical.rst:476
msgid ""
"InstantSend is a feature provided by the Historia network that allows for "
"0-confirmation transactions to be safely accepted by Merchants and other "
"service providers. Secured by the Masternode Network, this mechanism "
"eliminates the risk of a “Double Spend” by locking transaction inputs for"
" a given transaction at a protocol level."
msgstr ""

#: ../../merchants/technical.rst:484
msgid "InstantSend Transactions vs. Standard Transactions"
msgstr ""

#: ../../merchants/technical.rst:486
msgid ""
"From an integration perspective there are only minor differences between "
"an InstantSend Transaction and a Standard Transaction. Both transaction "
"types are formed in the same way and are signed using the same process; "
"the key difference is the fee structure and input requirements for "
"InstantSend."
msgstr ""

#: ../../merchants/technical.rst:492
msgid ""
"Fee Structure: InstantSend utilizes a “per-input” fee of 0.0001 HISTORIA per "
"Input."
msgstr ""

#: ../../merchants/technical.rst:494
msgid ""
"Input Requirements: All inputs for an InstantSend transaction must have "
"at least 6 confirmations."
msgstr ""

#: ../../merchants/technical.rst:497
msgid ""
"In the event that a given transaction does not meet both criteria it will"
" revert to a standard transaction."
msgstr ""

#: ../../merchants/technical.rst:501
msgid "Receiving InstantSend Transactions"
msgstr ""

#: ../../merchants/technical.rst:503
msgid ""
"InstantSend transactions are handled in the same way as a Standard "
"Transaction, typically through JSON-RPC, Insight API, or an internal "
"notification script / service that is configured at a server level."
msgstr ""

#: ../../merchants/technical.rst:507
msgid ""
"JSON-RPC: The following RPC commands will include InstantSend-related "
"information. Within the response you’ll find an “InstantLock” field the "
"status of a given Transaction. This true/false (boolean) value will "
"indicate whether an InstantSend has been observed."
msgstr ""

#: ../../merchants/technical.rst:512
msgid ""
"GetTransaction: https://historia-docs.github.io/en/developer-"
"reference#gettransaction"
msgstr ""

#: ../../merchants/technical.rst:513
msgid ""
"ListTransactions: https://historia-docs.github.io/en/developer-"
"reference#listtransactions"
msgstr ""

#: ../../merchants/technical.rst:514
msgid ""
"ListSinceBlock: https://historia-docs.github.io/en/developer-"
"reference#listsinceblock"
msgstr ""

#: ../../merchants/technical.rst:516
msgid ""
"Insight API: Insight API can be used to detect InstantSend transactions "
"and to push notifications to clients using WebSockets. The API can also "
"be manually polled to retrieve Transaction information including "
"InstantSend status."
msgstr ""

#: ../../merchants/technical.rst:521
msgid "Web Socket: https://github.com/historiaevo/insight-api#web-socket-api"
msgstr ""

#: ../../merchants/technical.rst:522
msgid ""
"Transaction API: https://github.com/historiaevo/insight-api#instantsend-"
"transactions"
msgstr ""

#: ../../merchants/technical.rst:524
msgid ""
"Script Notify: The Historia Core Daemon can be configured to execute an "
"external script whenever an InstantSend transaction relating to that "
"wallet is observed. This is configured by adding the following line to "
"the historia.conf file:"
msgstr ""

#: ../../merchants/technical.rst:529
#, python-format
msgid "``instantsendnotify=/path/to/concurrent/safe/handler %s``"
msgstr ""

#: ../../merchants/technical.rst:531
msgid ""
"*Note that only addresses imported to the wallet will be monitored for "
"InstantSend Transactions.*"
msgstr ""

#: ../../merchants/technical.rst:535
msgid "Broadcasting InstantSend Transactions"
msgstr ""

#: ../../merchants/technical.rst:537
msgid ""
"InstantSend Transactions can be constructed and broadcast using an "
"approach similar to Standard Transactions. Provided the InstantSend Fee "
"Structure and Input Requirements are met, an InstantSend can be broadcast"
" using JSON-RPC or Insight API as a Raw Transaction."
msgstr ""

#: ../../merchants/technical.rst:542
msgid ""
"JSON-RPC: The “SendRawTransaction” RPC command can be utilized to "
"broadcast a raw transaction using InstantSend. When utilizing this "
"command be sure to set both optional parameters as “true”"
msgstr ""

#: ../../merchants/technical.rst:546
msgid ""
"``sendrawtransaction \"hexstring\" ( allowhighfees instantsend )`` "
"``sendrawtransaction \"hexstring\" true true``"
msgstr ""

#: ../../merchants/technical.rst:549
msgid ""
"More Information: https://historia-docs.github.io/en/developer-"
"reference#sendrawtransaction"
msgstr ""

#: ../../merchants/technical.rst:551
msgid ""
"Insight API: Raw Transactions can also be broadcast as an InstantSend "
"using Insight API. In this case all that is required is to POST the raw "
"transaction using the ``/tx/sendix`` route."
msgstr ""

#: ../../merchants/technical.rst:555
msgid ""
"More Information: https://github.com/historiaevo/insight-api#instantsend-"
"transaction"
msgstr ""

#: ../../merchants/technical.rst:558
msgid "Additional Resources"
msgstr ""

#: ../../merchants/technical.rst:560
msgid ""
"The following resources provide additional information about InstantSend "
"and are intended to help provide a more complete understanding of the "
"underlying technologies."
msgstr ""

#: ../../merchants/technical.rst:564
msgid ""
"`InstantSend Whitepaper "
"<https://HistoriaOffical.atlassian.net/wiki/download/attachments/75530298/Historia%20Whitepaper%20-%20InstantTX.pdf>`_"
msgstr ""

#: ../../merchants/technical.rst:565
msgid ""
"`How Historia InstantSend Protect Merchants from Double Spends "
"<https://www.youtube.com/watch?v=HJx82On8jig>`_"
msgstr ""

#: ../../merchants/technical.rst:566
msgid ""
"`InstantSend Presentation from the Historia Conference London 2017 "
"<https://www.youtube.com/watch?v=n4PELomRiFY>`_"
msgstr ""

#: ../../merchants/technical.rst:570
msgid "Vending Machines"
msgstr ""

#: ../../merchants/technical.rst:572
msgid ""
"Community member moocowmoo has released code to help merchants build "
"their own vending machine and set it up to receive Historia InstantSend "
"payments. The Historiavend software can also be used to create any sort of "
"payment system, including point-of-sale systems, that can accept "
"InstantSend payments."
msgstr ""

#: ../../merchants/technical.rst:578
msgid "`Open Source Code <https://github.com/moocowmoo/historiavend>`_"
msgstr ""

#: ../../merchants/technical.rst:579
msgid "`Demonstration website <http://code.historiandrink.com>`_"
msgstr ""

#: ../../merchants/technical.rst:580
msgid "`Demonstration video <https://www.youtube.com/watch?v=SX-3kwbam0o>`_"
msgstr ""

#: ../../merchants/technical.rst:584
msgid "Price Tickers"
msgstr ""

#: ../../merchants/technical.rst:586
msgid ""
"You can add a simple price ticket widget to your website using the simple"
" `code snippet generator from CoinGecko "
"<https://www.coingecko.com/en/widgets/ticker/historia/usd>`_."
msgstr ""

#: ../../merchants/technical.rst:596
msgid ""
"Similar widgets with different designs are available from `CoinLib "
"<https://coinlib.io/widgets>`_, `WorldCoinIndex "
"<https://www.worldcoinindex.com/Widget>`_ and `Cryptonator "
"<https://www.cryptonator.com/widget>`_, while an API providing similar "
"information is available from `HistoriaCentral "
"<https://www.historiacentral.org/about/api>`_."
msgstr ""

#: ../../merchants/technical.rst:604
msgid "QR Codes"
msgstr ""

#: ../../merchants/technical.rst:606
msgid ""
"Many wallets are capable of generating QR codes which can be scanned to "
"simplify entry of the Historia address. Printing these codes or posting the "
"on your website makes it easy to receive payment and tips in Historia, both "
"online and offline."
msgstr ""

#: ../../merchants/technical.rst:611
msgid ""
"In Historia Core, go to the **Receive** tab, generate an address if "
"necessary, and double-click it to display a QR code. Right click on the "
"QR code and select **Save Image** to save a PNG file."
msgstr ""

#: ../../merchants/technical.rst:614
msgid ""
"In Historia for Android, tap **Request Coins** and then tap the QR code to "
"display a larger image. You can screenshot this to save an image."
msgstr ""

#: ../../merchants/technical.rst:616
msgid ""
"In Historia for iOS, swipe to the left to display the **Receive Historia** "
"screen. A QR code and address will appear. You can screenshot this to "
"save an image."
msgstr ""

#: ../../merchants/technical.rst:619
msgid ""
"To generate a QR code from any Historia address, visit `CWA QR Code Generator"
" <https://cwaqrgen.com/historia>`_ and simply paste your Historia address to "
"generate an image."
msgstr ""

#~ msgid "Technical"
#~ msgstr ""

#~ msgid ""
#~ "Historia welcomes new and existing merchants"
#~ " and supports integration through a "
#~ "standardised onboarding process. Larger "
#~ "integrations may require some customisation."
#~ msgstr ""

#~ msgid "Bitcore"
#~ msgstr ""

#~ msgid ""
#~ "Bitcore is a full Historia node — "
#~ "your apps run directly on the "
#~ "peer-to-peer network. For wallet "
#~ "application development, additional indexes "
#~ "have been added into Historia for "
#~ "querying address balances, transaction "
#~ "history, and unspent outputs."
#~ msgstr ""

#~ msgid "Repository: https://github.com/historiaevo/bitcore-lib-historia"
#~ msgstr ""

#~ msgid ""
#~ "historiaj is a library for working "
#~ "with the Historia protocol. It can "
#~ "maintain a wallet, send/receive transactions"
#~ " without needing a local copy of "
#~ "Historia Core and has many other "
#~ "advanced features. It's implemented in "
#~ "Java but can be used from any "
#~ "JVM compatible language: examples in "
#~ "Python and JavaScript are included."
#~ msgstr ""

#~ msgid ""
#~ "Similar widgets with different designs "
#~ "are available from `CoinLib "
#~ "<https://coinlib.io/widgets>`_, `WorldCoinIndex "
#~ "<https://www.worldcoinindex.com/Widget>`_, `Coinoxo "
#~ "<https://www.coinoxo.com/charts/HISTORIA>`_ and `Cryptonator"
#~ " <https://www.cryptonator.com/widget>`_, while an "
#~ "API providing similar information is "
#~ "available from `HistoriaCentral "
#~ "<https://www.historiacentral.org/about/api>`_."
#~ msgstr ""

#~ msgid ""
#~ "SDKs (Software Development Kits) are "
#~ "used to accelerate the design and "
#~ "development of a product for the "
#~ "Historia Network. These resources can either"
#~ " be used to interface with an "
#~ "API provider or for the creation "
#~ "of standalone applications."
#~ msgstr ""

#~ msgid "Historiacore"
#~ msgstr ""

#~ msgid ""
#~ "Historiacore is a fork of Bitcore and"
#~ " operates as a full Historia node —"
#~ " your apps run directly on the  "
#~ "peer-to-peer network. For wallet "
#~ "application development, additional indexes "
#~ "have been added into Historia for "
#~ "querying address balances, transaction "
#~ "history, and unspent outputs."
#~ msgstr ""

#~ msgid "HistoriaJ"
#~ msgstr ""

#~ msgid "NBitcoin"
#~ msgstr ""

#~ msgid ""
#~ "The open-source Insight REST API "
#~ "provides you with a convenient, powerful"
#~ " and simple way to read data "
#~ "from the Historia network and build "
#~ "your own services with it."
#~ msgstr ""

#~ msgid "Web Socket: https://github.com/HistoriaOffical/insight-api-historia#web-socket-api"
#~ msgstr ""

#~ msgid ""
#~ "Transaction API: https://github.com/HistoriaOffical/insight-"
#~ "api-historia#instantsend-transactions"
#~ msgstr ""

